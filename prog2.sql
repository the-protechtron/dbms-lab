-- ------- TABLE CREATION -------

-- 1. SALESMAN table
CREATE TABLE SALESMAN (
    SALESMAN_ID INT PRIMARY KEY,
    NAME VARCHAR(50),
    COMMISSION INT,
    CITY VARCHAR(50)
);

-- 2. CUSTOMER table
CREATE TABLE CUSTOMER (
    CUSTOMER_ID INT PRIMARY KEY,
    CUST_NAME VARCHAR(50),
    CITY VARCHAR(50),
    GRADE INT,
    SALESMAN_ID INT,
    FOREIGN KEY (SALESMAN_ID) REFERENCES SALESMAN(SALESMAN_ID) ON DELETE CASCADE
);

-- 3. ORDERS table
CREATE TABLE ORDERS (
    ORD_NO INT PRIMARY KEY,
    PURCHASE_AMT DECIMAL(10,2),
    ORD_DATE DATE,
    CUSTOMER_ID INT,
    SALESMAN_ID INT,
    FOREIGN KEY (CUSTOMER_ID) REFERENCES CUSTOMER(CUSTOMER_ID) ON DELETE CASCADE,
    FOREIGN KEY (SALESMAN_ID) REFERENCES SALESMAN(SALESMAN_ID) ON DELETE CASCADE
);

-- ------- INSERTION -------

-- SALESMAN data
INSERT INTO SALESMAN VALUES (1000, 'JOHN', 25, 'BANGALORE');
INSERT INTO SALESMAN VALUES (2000, 'RAVI', 20, 'BANGALORE');
INSERT INTO SALESMAN VALUES (3000, 'KUMAR', 15, 'MYSORE');
INSERT INTO SALESMAN VALUES (4000, 'SMITH', 30, 'DELHI');
INSERT INTO SALESMAN VALUES (5000, 'HARSHA', 15, 'HYDERABAD');

-- CUSTOMER data
INSERT INTO CUSTOMER VALUES (10, 'PREETHI', 'BANGALORE', 100, 1000);
INSERT INTO CUSTOMER VALUES (11, 'VIVEK', 'MANGALORE', 300, 1000);
INSERT INTO CUSTOMER VALUES (12, 'BHASKAR', 'CHENNAI', 400, 2000);
INSERT INTO CUSTOMER VALUES (13, 'CHETHAN', 'BANGALORE', 200, 2000);
INSERT INTO CUSTOMER VALUES (14, 'MAMATHA', 'BANGALORE', 400, 3000);

-- ORDERS data
INSERT INTO ORDERS VALUES (50, 5000.00, '2017-05-04', 10, 1000);
INSERT INTO ORDERS VALUES (51, 450.00, '2017-01-20', 10, 2000);
INSERT INTO ORDERS VALUES (52, 1000.00, '2017-02-24', 13, 2000);
INSERT INTO ORDERS VALUES (53, 3500.00, '2017-04-13', 14, 3000);
INSERT INTO ORDERS VALUES (54, 550.00, '2017-03-09', 12, 2000);

-- ------- QUERIES -------

-- Q1: Count of customers per grade above Bangalore average grade
SELECT 
    GRADE, 
    COUNT(DISTINCT CUSTOMER_ID) AS CUSTOMER_COUNT
FROM CUSTOMER
GROUP BY GRADE
HAVING GRADE > (
    SELECT AVG(GRADE)
    FROM CUSTOMER 
    WHERE CITY = 'BANGALORE'
);

-- Q2: Salesmen with more than one customer
SELECT SALESMAN_ID, NAME 
FROM SALESMAN A
WHERE (
    SELECT COUNT(*) 
    FROM CUSTOMER 
    WHERE SALESMAN_ID = A.SALESMAN_ID
) > 1;

-- Q3: Salesmen and customers in same city + unmatched salesmen
SELECT 
    S.SALESMAN_ID, 
    S.NAME, 
    C.CUST_NAME, 
    S.COMMISSION 
FROM SALESMAN S 
JOIN CUSTOMER C ON S.CITY = C.CITY

UNION

SELECT 
    S.SALESMAN_ID, 
    S.NAME, 
    'NO MATCH' AS CUST_NAME, 
    S.COMMISSION 
FROM SALESMAN S
WHERE S.CITY NOT IN (
    SELECT CITY FROM CUSTOMER
)
ORDER BY NAME DESC;

-- Q4: View of elite salesmen based on max order per date
CREATE OR REPLACE VIEW ELITESALESMAN AS
SELECT 
    O.ORD_DATE, 
    S.SALESMAN_ID, 
    S.NAME
FROM SALESMAN S
JOIN ORDERS O ON S.SALESMAN_ID = O.SALESMAN_ID
WHERE O.PURCHASE_AMT = (
    SELECT MAX(PURCHASE_AMT) 
    FROM ORDERS 
    WHERE ORD_DATE = O.ORD_DATE
);

-- View Usage Example:
-- SELECT * FROM ELITESALESMAN;

-- Q5: Delete salesman with ID 1000 and cascade delete dependent records
DELETE FROM SALESMAN
WHERE SALESMAN_ID = 1000;
